// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/aws/cloud.go

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	services "github.com/aws/aws-application-networking-k8s/pkg/aws/services"
	gomock "github.com/golang/mock/gomock"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// EKS mocks base method.
func (m *MockCloud) EKS() services.EKS {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EKS")
	ret0, _ := ret[0].(services.EKS)
	return ret0
}

// EKS indicates an expected call of EKS.
func (mr *MockCloudMockRecorder) EKS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EKS", reflect.TypeOf((*MockCloud)(nil).EKS))
}

// Mercury mocks base method.
func (m *MockCloud) Mercury() services.Mercury {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mercury")
	ret0, _ := ret[0].(services.Mercury)
	return ret0
}

// Mercury indicates an expected call of Mercury.
func (mr *MockCloudMockRecorder) Mercury() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mercury", reflect.TypeOf((*MockCloud)(nil).Mercury))
}

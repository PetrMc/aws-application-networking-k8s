// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/aws/services/mercury.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	mercury "github.com/aws/aws-sdk-go/service/mercury"
	gomock "github.com/golang/mock/gomock"
)

// MockMercury is a mock of Mercury interface.
type MockMercury struct {
	ctrl     *gomock.Controller
	recorder *MockMercuryMockRecorder
}

// MockMercuryMockRecorder is the mock recorder for MockMercury.
type MockMercuryMockRecorder struct {
	mock *MockMercury
}

// NewMockMercury creates a new mock instance.
func NewMockMercury(ctrl *gomock.Controller) *MockMercury {
	mock := &MockMercury{ctrl: ctrl}
	mock.recorder = &MockMercuryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMercury) EXPECT() *MockMercuryMockRecorder {
	return m.recorder
}

// BatchUpdateRule mocks base method.
func (m *MockMercury) BatchUpdateRule(arg0 *mercury.BatchUpdateRuleInput) (*mercury.BatchUpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateRule", arg0)
	ret0, _ := ret[0].(*mercury.BatchUpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateRule indicates an expected call of BatchUpdateRule.
func (mr *MockMercuryMockRecorder) BatchUpdateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRule", reflect.TypeOf((*MockMercury)(nil).BatchUpdateRule), arg0)
}

// BatchUpdateRuleRequest mocks base method.
func (m *MockMercury) BatchUpdateRuleRequest(arg0 *mercury.BatchUpdateRuleInput) (*request.Request, *mercury.BatchUpdateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.BatchUpdateRuleOutput)
	return ret0, ret1
}

// BatchUpdateRuleRequest indicates an expected call of BatchUpdateRuleRequest.
func (mr *MockMercuryMockRecorder) BatchUpdateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRuleRequest", reflect.TypeOf((*MockMercury)(nil).BatchUpdateRuleRequest), arg0)
}

// BatchUpdateRuleWithContext mocks base method.
func (m *MockMercury) BatchUpdateRuleWithContext(arg0 aws.Context, arg1 *mercury.BatchUpdateRuleInput, arg2 ...request.Option) (*mercury.BatchUpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.BatchUpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateRuleWithContext indicates an expected call of BatchUpdateRuleWithContext.
func (mr *MockMercuryMockRecorder) BatchUpdateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRuleWithContext", reflect.TypeOf((*MockMercury)(nil).BatchUpdateRuleWithContext), varargs...)
}

// CreateAccessLogSubscription mocks base method.
func (m *MockMercury) CreateAccessLogSubscription(arg0 *mercury.CreateAccessLogSubscriptionInput) (*mercury.CreateAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessLogSubscription", arg0)
	ret0, _ := ret[0].(*mercury.CreateAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessLogSubscription indicates an expected call of CreateAccessLogSubscription.
func (mr *MockMercuryMockRecorder) CreateAccessLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessLogSubscription", reflect.TypeOf((*MockMercury)(nil).CreateAccessLogSubscription), arg0)
}

// CreateAccessLogSubscriptionRequest mocks base method.
func (m *MockMercury) CreateAccessLogSubscriptionRequest(arg0 *mercury.CreateAccessLogSubscriptionInput) (*request.Request, *mercury.CreateAccessLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.CreateAccessLogSubscriptionOutput)
	return ret0, ret1
}

// CreateAccessLogSubscriptionRequest indicates an expected call of CreateAccessLogSubscriptionRequest.
func (mr *MockMercuryMockRecorder) CreateAccessLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessLogSubscriptionRequest", reflect.TypeOf((*MockMercury)(nil).CreateAccessLogSubscriptionRequest), arg0)
}

// CreateAccessLogSubscriptionWithContext mocks base method.
func (m *MockMercury) CreateAccessLogSubscriptionWithContext(arg0 aws.Context, arg1 *mercury.CreateAccessLogSubscriptionInput, arg2 ...request.Option) (*mercury.CreateAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.CreateAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessLogSubscriptionWithContext indicates an expected call of CreateAccessLogSubscriptionWithContext.
func (mr *MockMercuryMockRecorder) CreateAccessLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessLogSubscriptionWithContext", reflect.TypeOf((*MockMercury)(nil).CreateAccessLogSubscriptionWithContext), varargs...)
}

// CreateListener mocks base method.
func (m *MockMercury) CreateListener(arg0 *mercury.CreateListenerInput) (*mercury.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListener", arg0)
	ret0, _ := ret[0].(*mercury.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListener indicates an expected call of CreateListener.
func (mr *MockMercuryMockRecorder) CreateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListener", reflect.TypeOf((*MockMercury)(nil).CreateListener), arg0)
}

// CreateListenerRequest mocks base method.
func (m *MockMercury) CreateListenerRequest(arg0 *mercury.CreateListenerInput) (*request.Request, *mercury.CreateListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.CreateListenerOutput)
	return ret0, ret1
}

// CreateListenerRequest indicates an expected call of CreateListenerRequest.
func (mr *MockMercuryMockRecorder) CreateListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerRequest", reflect.TypeOf((*MockMercury)(nil).CreateListenerRequest), arg0)
}

// CreateListenerWithContext mocks base method.
func (m *MockMercury) CreateListenerWithContext(arg0 aws.Context, arg1 *mercury.CreateListenerInput, arg2 ...request.Option) (*mercury.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateListenerWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListenerWithContext indicates an expected call of CreateListenerWithContext.
func (mr *MockMercuryMockRecorder) CreateListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerWithContext", reflect.TypeOf((*MockMercury)(nil).CreateListenerWithContext), varargs...)
}

// CreateMesh mocks base method.
func (m *MockMercury) CreateMesh(arg0 *mercury.CreateMeshInput) (*mercury.CreateMeshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMesh", arg0)
	ret0, _ := ret[0].(*mercury.CreateMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMesh indicates an expected call of CreateMesh.
func (mr *MockMercuryMockRecorder) CreateMesh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMercury)(nil).CreateMesh), arg0)
}

// CreateMeshRequest mocks base method.
func (m *MockMercury) CreateMeshRequest(arg0 *mercury.CreateMeshInput) (*request.Request, *mercury.CreateMeshOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeshRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.CreateMeshOutput)
	return ret0, ret1
}

// CreateMeshRequest indicates an expected call of CreateMeshRequest.
func (mr *MockMercuryMockRecorder) CreateMeshRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshRequest", reflect.TypeOf((*MockMercury)(nil).CreateMeshRequest), arg0)
}

// CreateMeshServiceAssociation mocks base method.
func (m *MockMercury) CreateMeshServiceAssociation(arg0 *mercury.CreateMeshServiceAssociationInput) (*mercury.CreateMeshServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeshServiceAssociation", arg0)
	ret0, _ := ret[0].(*mercury.CreateMeshServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeshServiceAssociation indicates an expected call of CreateMeshServiceAssociation.
func (mr *MockMercuryMockRecorder) CreateMeshServiceAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshServiceAssociation", reflect.TypeOf((*MockMercury)(nil).CreateMeshServiceAssociation), arg0)
}

// CreateMeshServiceAssociationRequest mocks base method.
func (m *MockMercury) CreateMeshServiceAssociationRequest(arg0 *mercury.CreateMeshServiceAssociationInput) (*request.Request, *mercury.CreateMeshServiceAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeshServiceAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.CreateMeshServiceAssociationOutput)
	return ret0, ret1
}

// CreateMeshServiceAssociationRequest indicates an expected call of CreateMeshServiceAssociationRequest.
func (mr *MockMercuryMockRecorder) CreateMeshServiceAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshServiceAssociationRequest", reflect.TypeOf((*MockMercury)(nil).CreateMeshServiceAssociationRequest), arg0)
}

// CreateMeshServiceAssociationWithContext mocks base method.
func (m *MockMercury) CreateMeshServiceAssociationWithContext(arg0 aws.Context, arg1 *mercury.CreateMeshServiceAssociationInput, arg2 ...request.Option) (*mercury.CreateMeshServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshServiceAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.CreateMeshServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeshServiceAssociationWithContext indicates an expected call of CreateMeshServiceAssociationWithContext.
func (mr *MockMercuryMockRecorder) CreateMeshServiceAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshServiceAssociationWithContext", reflect.TypeOf((*MockMercury)(nil).CreateMeshServiceAssociationWithContext), varargs...)
}

// CreateMeshVpcAssociation mocks base method.
func (m *MockMercury) CreateMeshVpcAssociation(arg0 *mercury.CreateMeshVpcAssociationInput) (*mercury.CreateMeshVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeshVpcAssociation", arg0)
	ret0, _ := ret[0].(*mercury.CreateMeshVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeshVpcAssociation indicates an expected call of CreateMeshVpcAssociation.
func (mr *MockMercuryMockRecorder) CreateMeshVpcAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshVpcAssociation", reflect.TypeOf((*MockMercury)(nil).CreateMeshVpcAssociation), arg0)
}

// CreateMeshVpcAssociationRequest mocks base method.
func (m *MockMercury) CreateMeshVpcAssociationRequest(arg0 *mercury.CreateMeshVpcAssociationInput) (*request.Request, *mercury.CreateMeshVpcAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeshVpcAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.CreateMeshVpcAssociationOutput)
	return ret0, ret1
}

// CreateMeshVpcAssociationRequest indicates an expected call of CreateMeshVpcAssociationRequest.
func (mr *MockMercuryMockRecorder) CreateMeshVpcAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshVpcAssociationRequest", reflect.TypeOf((*MockMercury)(nil).CreateMeshVpcAssociationRequest), arg0)
}

// CreateMeshVpcAssociationWithContext mocks base method.
func (m *MockMercury) CreateMeshVpcAssociationWithContext(arg0 aws.Context, arg1 *mercury.CreateMeshVpcAssociationInput, arg2 ...request.Option) (*mercury.CreateMeshVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshVpcAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.CreateMeshVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeshVpcAssociationWithContext indicates an expected call of CreateMeshVpcAssociationWithContext.
func (mr *MockMercuryMockRecorder) CreateMeshVpcAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshVpcAssociationWithContext", reflect.TypeOf((*MockMercury)(nil).CreateMeshVpcAssociationWithContext), varargs...)
}

// CreateMeshWithContext mocks base method.
func (m *MockMercury) CreateMeshWithContext(arg0 aws.Context, arg1 *mercury.CreateMeshInput, arg2 ...request.Option) (*mercury.CreateMeshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeshWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.CreateMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeshWithContext indicates an expected call of CreateMeshWithContext.
func (mr *MockMercuryMockRecorder) CreateMeshWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshWithContext", reflect.TypeOf((*MockMercury)(nil).CreateMeshWithContext), varargs...)
}

// CreateRule mocks base method.
func (m *MockMercury) CreateRule(arg0 *mercury.CreateRuleInput) (*mercury.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", arg0)
	ret0, _ := ret[0].(*mercury.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockMercuryMockRecorder) CreateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockMercury)(nil).CreateRule), arg0)
}

// CreateRuleRequest mocks base method.
func (m *MockMercury) CreateRuleRequest(arg0 *mercury.CreateRuleInput) (*request.Request, *mercury.CreateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.CreateRuleOutput)
	return ret0, ret1
}

// CreateRuleRequest indicates an expected call of CreateRuleRequest.
func (mr *MockMercuryMockRecorder) CreateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleRequest", reflect.TypeOf((*MockMercury)(nil).CreateRuleRequest), arg0)
}

// CreateRuleWithContext mocks base method.
func (m *MockMercury) CreateRuleWithContext(arg0 aws.Context, arg1 *mercury.CreateRuleInput, arg2 ...request.Option) (*mercury.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleWithContext indicates an expected call of CreateRuleWithContext.
func (mr *MockMercuryMockRecorder) CreateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleWithContext", reflect.TypeOf((*MockMercury)(nil).CreateRuleWithContext), varargs...)
}

// CreateService mocks base method.
func (m *MockMercury) CreateService(arg0 *mercury.CreateServiceInput) (*mercury.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(*mercury.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockMercuryMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockMercury)(nil).CreateService), arg0)
}

// CreateServiceRequest mocks base method.
func (m *MockMercury) CreateServiceRequest(arg0 *mercury.CreateServiceInput) (*request.Request, *mercury.CreateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.CreateServiceOutput)
	return ret0, ret1
}

// CreateServiceRequest indicates an expected call of CreateServiceRequest.
func (mr *MockMercuryMockRecorder) CreateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceRequest", reflect.TypeOf((*MockMercury)(nil).CreateServiceRequest), arg0)
}

// CreateServiceWithContext mocks base method.
func (m *MockMercury) CreateServiceWithContext(arg0 aws.Context, arg1 *mercury.CreateServiceInput, arg2 ...request.Option) (*mercury.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceWithContext indicates an expected call of CreateServiceWithContext.
func (mr *MockMercuryMockRecorder) CreateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceWithContext", reflect.TypeOf((*MockMercury)(nil).CreateServiceWithContext), varargs...)
}

// CreateTargetGroup mocks base method.
func (m *MockMercury) CreateTargetGroup(arg0 *mercury.CreateTargetGroupInput) (*mercury.CreateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetGroup", arg0)
	ret0, _ := ret[0].(*mercury.CreateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetGroup indicates an expected call of CreateTargetGroup.
func (mr *MockMercuryMockRecorder) CreateTargetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroup", reflect.TypeOf((*MockMercury)(nil).CreateTargetGroup), arg0)
}

// CreateTargetGroupRequest mocks base method.
func (m *MockMercury) CreateTargetGroupRequest(arg0 *mercury.CreateTargetGroupInput) (*request.Request, *mercury.CreateTargetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.CreateTargetGroupOutput)
	return ret0, ret1
}

// CreateTargetGroupRequest indicates an expected call of CreateTargetGroupRequest.
func (mr *MockMercuryMockRecorder) CreateTargetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroupRequest", reflect.TypeOf((*MockMercury)(nil).CreateTargetGroupRequest), arg0)
}

// CreateTargetGroupWithContext mocks base method.
func (m *MockMercury) CreateTargetGroupWithContext(arg0 aws.Context, arg1 *mercury.CreateTargetGroupInput, arg2 ...request.Option) (*mercury.CreateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTargetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.CreateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetGroupWithContext indicates an expected call of CreateTargetGroupWithContext.
func (mr *MockMercuryMockRecorder) CreateTargetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroupWithContext", reflect.TypeOf((*MockMercury)(nil).CreateTargetGroupWithContext), varargs...)
}

// DeleteAccessLogSubscription mocks base method.
func (m *MockMercury) DeleteAccessLogSubscription(arg0 *mercury.DeleteAccessLogSubscriptionInput) (*mercury.DeleteAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessLogSubscription", arg0)
	ret0, _ := ret[0].(*mercury.DeleteAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessLogSubscription indicates an expected call of DeleteAccessLogSubscription.
func (mr *MockMercuryMockRecorder) DeleteAccessLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSubscription", reflect.TypeOf((*MockMercury)(nil).DeleteAccessLogSubscription), arg0)
}

// DeleteAccessLogSubscriptionRequest mocks base method.
func (m *MockMercury) DeleteAccessLogSubscriptionRequest(arg0 *mercury.DeleteAccessLogSubscriptionInput) (*request.Request, *mercury.DeleteAccessLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteAccessLogSubscriptionOutput)
	return ret0, ret1
}

// DeleteAccessLogSubscriptionRequest indicates an expected call of DeleteAccessLogSubscriptionRequest.
func (mr *MockMercuryMockRecorder) DeleteAccessLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSubscriptionRequest", reflect.TypeOf((*MockMercury)(nil).DeleteAccessLogSubscriptionRequest), arg0)
}

// DeleteAccessLogSubscriptionWithContext mocks base method.
func (m *MockMercury) DeleteAccessLogSubscriptionWithContext(arg0 aws.Context, arg1 *mercury.DeleteAccessLogSubscriptionInput, arg2 ...request.Option) (*mercury.DeleteAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessLogSubscriptionWithContext indicates an expected call of DeleteAccessLogSubscriptionWithContext.
func (mr *MockMercuryMockRecorder) DeleteAccessLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSubscriptionWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteAccessLogSubscriptionWithContext), varargs...)
}

// DeleteAuthPolicy mocks base method.
func (m *MockMercury) DeleteAuthPolicy(arg0 *mercury.DeleteAuthPolicyInput) (*mercury.DeleteAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthPolicy", arg0)
	ret0, _ := ret[0].(*mercury.DeleteAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthPolicy indicates an expected call of DeleteAuthPolicy.
func (mr *MockMercuryMockRecorder) DeleteAuthPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthPolicy", reflect.TypeOf((*MockMercury)(nil).DeleteAuthPolicy), arg0)
}

// DeleteAuthPolicyRequest mocks base method.
func (m *MockMercury) DeleteAuthPolicyRequest(arg0 *mercury.DeleteAuthPolicyInput) (*request.Request, *mercury.DeleteAuthPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteAuthPolicyOutput)
	return ret0, ret1
}

// DeleteAuthPolicyRequest indicates an expected call of DeleteAuthPolicyRequest.
func (mr *MockMercuryMockRecorder) DeleteAuthPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthPolicyRequest", reflect.TypeOf((*MockMercury)(nil).DeleteAuthPolicyRequest), arg0)
}

// DeleteAuthPolicyWithContext mocks base method.
func (m *MockMercury) DeleteAuthPolicyWithContext(arg0 aws.Context, arg1 *mercury.DeleteAuthPolicyInput, arg2 ...request.Option) (*mercury.DeleteAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthPolicyWithContext indicates an expected call of DeleteAuthPolicyWithContext.
func (mr *MockMercuryMockRecorder) DeleteAuthPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthPolicyWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteAuthPolicyWithContext), varargs...)
}

// DeleteListener mocks base method.
func (m *MockMercury) DeleteListener(arg0 *mercury.DeleteListenerInput) (*mercury.DeleteListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListener", arg0)
	ret0, _ := ret[0].(*mercury.DeleteListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListener indicates an expected call of DeleteListener.
func (mr *MockMercuryMockRecorder) DeleteListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListener", reflect.TypeOf((*MockMercury)(nil).DeleteListener), arg0)
}

// DeleteListenerRequest mocks base method.
func (m *MockMercury) DeleteListenerRequest(arg0 *mercury.DeleteListenerInput) (*request.Request, *mercury.DeleteListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteListenerOutput)
	return ret0, ret1
}

// DeleteListenerRequest indicates an expected call of DeleteListenerRequest.
func (mr *MockMercuryMockRecorder) DeleteListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerRequest", reflect.TypeOf((*MockMercury)(nil).DeleteListenerRequest), arg0)
}

// DeleteListenerWithContext mocks base method.
func (m *MockMercury) DeleteListenerWithContext(arg0 aws.Context, arg1 *mercury.DeleteListenerInput, arg2 ...request.Option) (*mercury.DeleteListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteListenerWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListenerWithContext indicates an expected call of DeleteListenerWithContext.
func (mr *MockMercuryMockRecorder) DeleteListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteListenerWithContext), varargs...)
}

// DeleteMesh mocks base method.
func (m *MockMercury) DeleteMesh(arg0 *mercury.DeleteMeshInput) (*mercury.DeleteMeshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMesh", arg0)
	ret0, _ := ret[0].(*mercury.DeleteMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMesh indicates an expected call of DeleteMesh.
func (mr *MockMercuryMockRecorder) DeleteMesh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMercury)(nil).DeleteMesh), arg0)
}

// DeleteMeshRequest mocks base method.
func (m *MockMercury) DeleteMeshRequest(arg0 *mercury.DeleteMeshInput) (*request.Request, *mercury.DeleteMeshOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeshRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteMeshOutput)
	return ret0, ret1
}

// DeleteMeshRequest indicates an expected call of DeleteMeshRequest.
func (mr *MockMercuryMockRecorder) DeleteMeshRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshRequest", reflect.TypeOf((*MockMercury)(nil).DeleteMeshRequest), arg0)
}

// DeleteMeshServiceAssociation mocks base method.
func (m *MockMercury) DeleteMeshServiceAssociation(arg0 *mercury.DeleteMeshServiceAssociationInput) (*mercury.DeleteMeshServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeshServiceAssociation", arg0)
	ret0, _ := ret[0].(*mercury.DeleteMeshServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeshServiceAssociation indicates an expected call of DeleteMeshServiceAssociation.
func (mr *MockMercuryMockRecorder) DeleteMeshServiceAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshServiceAssociation", reflect.TypeOf((*MockMercury)(nil).DeleteMeshServiceAssociation), arg0)
}

// DeleteMeshServiceAssociationRequest mocks base method.
func (m *MockMercury) DeleteMeshServiceAssociationRequest(arg0 *mercury.DeleteMeshServiceAssociationInput) (*request.Request, *mercury.DeleteMeshServiceAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeshServiceAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteMeshServiceAssociationOutput)
	return ret0, ret1
}

// DeleteMeshServiceAssociationRequest indicates an expected call of DeleteMeshServiceAssociationRequest.
func (mr *MockMercuryMockRecorder) DeleteMeshServiceAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshServiceAssociationRequest", reflect.TypeOf((*MockMercury)(nil).DeleteMeshServiceAssociationRequest), arg0)
}

// DeleteMeshServiceAssociationWithContext mocks base method.
func (m *MockMercury) DeleteMeshServiceAssociationWithContext(arg0 aws.Context, arg1 *mercury.DeleteMeshServiceAssociationInput, arg2 ...request.Option) (*mercury.DeleteMeshServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshServiceAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteMeshServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeshServiceAssociationWithContext indicates an expected call of DeleteMeshServiceAssociationWithContext.
func (mr *MockMercuryMockRecorder) DeleteMeshServiceAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshServiceAssociationWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteMeshServiceAssociationWithContext), varargs...)
}

// DeleteMeshVpcAssociation mocks base method.
func (m *MockMercury) DeleteMeshVpcAssociation(arg0 *mercury.DeleteMeshVpcAssociationInput) (*mercury.DeleteMeshVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeshVpcAssociation", arg0)
	ret0, _ := ret[0].(*mercury.DeleteMeshVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeshVpcAssociation indicates an expected call of DeleteMeshVpcAssociation.
func (mr *MockMercuryMockRecorder) DeleteMeshVpcAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshVpcAssociation", reflect.TypeOf((*MockMercury)(nil).DeleteMeshVpcAssociation), arg0)
}

// DeleteMeshVpcAssociationRequest mocks base method.
func (m *MockMercury) DeleteMeshVpcAssociationRequest(arg0 *mercury.DeleteMeshVpcAssociationInput) (*request.Request, *mercury.DeleteMeshVpcAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeshVpcAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteMeshVpcAssociationOutput)
	return ret0, ret1
}

// DeleteMeshVpcAssociationRequest indicates an expected call of DeleteMeshVpcAssociationRequest.
func (mr *MockMercuryMockRecorder) DeleteMeshVpcAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshVpcAssociationRequest", reflect.TypeOf((*MockMercury)(nil).DeleteMeshVpcAssociationRequest), arg0)
}

// DeleteMeshVpcAssociationWithContext mocks base method.
func (m *MockMercury) DeleteMeshVpcAssociationWithContext(arg0 aws.Context, arg1 *mercury.DeleteMeshVpcAssociationInput, arg2 ...request.Option) (*mercury.DeleteMeshVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshVpcAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteMeshVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeshVpcAssociationWithContext indicates an expected call of DeleteMeshVpcAssociationWithContext.
func (mr *MockMercuryMockRecorder) DeleteMeshVpcAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshVpcAssociationWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteMeshVpcAssociationWithContext), varargs...)
}

// DeleteMeshWithContext mocks base method.
func (m *MockMercury) DeleteMeshWithContext(arg0 aws.Context, arg1 *mercury.DeleteMeshInput, arg2 ...request.Option) (*mercury.DeleteMeshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeshWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeshWithContext indicates an expected call of DeleteMeshWithContext.
func (mr *MockMercuryMockRecorder) DeleteMeshWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeshWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteMeshWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method.
func (m *MockMercury) DeleteResourcePolicy(arg0 *mercury.DeleteResourcePolicyInput) (*mercury.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*mercury.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockMercuryMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockMercury)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method.
func (m *MockMercury) DeleteResourcePolicyRequest(arg0 *mercury.DeleteResourcePolicyInput) (*request.Request, *mercury.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest.
func (mr *MockMercuryMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockMercury)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyWithContext mocks base method.
func (m *MockMercury) DeleteResourcePolicyWithContext(arg0 aws.Context, arg1 *mercury.DeleteResourcePolicyInput, arg2 ...request.Option) (*mercury.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext.
func (mr *MockMercuryMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteRule mocks base method.
func (m *MockMercury) DeleteRule(arg0 *mercury.DeleteRuleInput) (*mercury.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0)
	ret0, _ := ret[0].(*mercury.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockMercuryMockRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockMercury)(nil).DeleteRule), arg0)
}

// DeleteRuleRequest mocks base method.
func (m *MockMercury) DeleteRuleRequest(arg0 *mercury.DeleteRuleInput) (*request.Request, *mercury.DeleteRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteRuleOutput)
	return ret0, ret1
}

// DeleteRuleRequest indicates an expected call of DeleteRuleRequest.
func (mr *MockMercuryMockRecorder) DeleteRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleRequest", reflect.TypeOf((*MockMercury)(nil).DeleteRuleRequest), arg0)
}

// DeleteRuleWithContext mocks base method.
func (m *MockMercury) DeleteRuleWithContext(arg0 aws.Context, arg1 *mercury.DeleteRuleInput, arg2 ...request.Option) (*mercury.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleWithContext indicates an expected call of DeleteRuleWithContext.
func (mr *MockMercuryMockRecorder) DeleteRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteRuleWithContext), varargs...)
}

// DeleteService mocks base method.
func (m *MockMercury) DeleteService(arg0 *mercury.DeleteServiceInput) (*mercury.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(*mercury.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockMercuryMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockMercury)(nil).DeleteService), arg0)
}

// DeleteServiceRequest mocks base method.
func (m *MockMercury) DeleteServiceRequest(arg0 *mercury.DeleteServiceInput) (*request.Request, *mercury.DeleteServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteServiceOutput)
	return ret0, ret1
}

// DeleteServiceRequest indicates an expected call of DeleteServiceRequest.
func (mr *MockMercuryMockRecorder) DeleteServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceRequest", reflect.TypeOf((*MockMercury)(nil).DeleteServiceRequest), arg0)
}

// DeleteServiceWithContext mocks base method.
func (m *MockMercury) DeleteServiceWithContext(arg0 aws.Context, arg1 *mercury.DeleteServiceInput, arg2 ...request.Option) (*mercury.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceWithContext indicates an expected call of DeleteServiceWithContext.
func (mr *MockMercuryMockRecorder) DeleteServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteServiceWithContext), varargs...)
}

// DeleteTargetGroup mocks base method.
func (m *MockMercury) DeleteTargetGroup(arg0 *mercury.DeleteTargetGroupInput) (*mercury.DeleteTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetGroup", arg0)
	ret0, _ := ret[0].(*mercury.DeleteTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTargetGroup indicates an expected call of DeleteTargetGroup.
func (mr *MockMercuryMockRecorder) DeleteTargetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroup", reflect.TypeOf((*MockMercury)(nil).DeleteTargetGroup), arg0)
}

// DeleteTargetGroupRequest mocks base method.
func (m *MockMercury) DeleteTargetGroupRequest(arg0 *mercury.DeleteTargetGroupInput) (*request.Request, *mercury.DeleteTargetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeleteTargetGroupOutput)
	return ret0, ret1
}

// DeleteTargetGroupRequest indicates an expected call of DeleteTargetGroupRequest.
func (mr *MockMercuryMockRecorder) DeleteTargetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroupRequest", reflect.TypeOf((*MockMercury)(nil).DeleteTargetGroupRequest), arg0)
}

// DeleteTargetGroupWithContext mocks base method.
func (m *MockMercury) DeleteTargetGroupWithContext(arg0 aws.Context, arg1 *mercury.DeleteTargetGroupInput, arg2 ...request.Option) (*mercury.DeleteTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTargetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeleteTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTargetGroupWithContext indicates an expected call of DeleteTargetGroupWithContext.
func (mr *MockMercuryMockRecorder) DeleteTargetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroupWithContext", reflect.TypeOf((*MockMercury)(nil).DeleteTargetGroupWithContext), varargs...)
}

// DeregisterTargets mocks base method.
func (m *MockMercury) DeregisterTargets(arg0 *mercury.DeregisterTargetsInput) (*mercury.DeregisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterTargets", arg0)
	ret0, _ := ret[0].(*mercury.DeregisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterTargets indicates an expected call of DeregisterTargets.
func (mr *MockMercuryMockRecorder) DeregisterTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTargets", reflect.TypeOf((*MockMercury)(nil).DeregisterTargets), arg0)
}

// DeregisterTargetsRequest mocks base method.
func (m *MockMercury) DeregisterTargetsRequest(arg0 *mercury.DeregisterTargetsInput) (*request.Request, *mercury.DeregisterTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.DeregisterTargetsOutput)
	return ret0, ret1
}

// DeregisterTargetsRequest indicates an expected call of DeregisterTargetsRequest.
func (mr *MockMercuryMockRecorder) DeregisterTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTargetsRequest", reflect.TypeOf((*MockMercury)(nil).DeregisterTargetsRequest), arg0)
}

// DeregisterTargetsWithContext mocks base method.
func (m *MockMercury) DeregisterTargetsWithContext(arg0 aws.Context, arg1 *mercury.DeregisterTargetsInput, arg2 ...request.Option) (*mercury.DeregisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.DeregisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterTargetsWithContext indicates an expected call of DeregisterTargetsWithContext.
func (mr *MockMercuryMockRecorder) DeregisterTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTargetsWithContext", reflect.TypeOf((*MockMercury)(nil).DeregisterTargetsWithContext), varargs...)
}

// GetAccessLogSubscription mocks base method.
func (m *MockMercury) GetAccessLogSubscription(arg0 *mercury.GetAccessLogSubscriptionInput) (*mercury.GetAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessLogSubscription", arg0)
	ret0, _ := ret[0].(*mercury.GetAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessLogSubscription indicates an expected call of GetAccessLogSubscription.
func (mr *MockMercuryMockRecorder) GetAccessLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogSubscription", reflect.TypeOf((*MockMercury)(nil).GetAccessLogSubscription), arg0)
}

// GetAccessLogSubscriptionRequest mocks base method.
func (m *MockMercury) GetAccessLogSubscriptionRequest(arg0 *mercury.GetAccessLogSubscriptionInput) (*request.Request, *mercury.GetAccessLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetAccessLogSubscriptionOutput)
	return ret0, ret1
}

// GetAccessLogSubscriptionRequest indicates an expected call of GetAccessLogSubscriptionRequest.
func (mr *MockMercuryMockRecorder) GetAccessLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogSubscriptionRequest", reflect.TypeOf((*MockMercury)(nil).GetAccessLogSubscriptionRequest), arg0)
}

// GetAccessLogSubscriptionWithContext mocks base method.
func (m *MockMercury) GetAccessLogSubscriptionWithContext(arg0 aws.Context, arg1 *mercury.GetAccessLogSubscriptionInput, arg2 ...request.Option) (*mercury.GetAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessLogSubscriptionWithContext indicates an expected call of GetAccessLogSubscriptionWithContext.
func (mr *MockMercuryMockRecorder) GetAccessLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogSubscriptionWithContext", reflect.TypeOf((*MockMercury)(nil).GetAccessLogSubscriptionWithContext), varargs...)
}

// GetAuthPolicy mocks base method.
func (m *MockMercury) GetAuthPolicy(arg0 *mercury.GetAuthPolicyInput) (*mercury.GetAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthPolicy", arg0)
	ret0, _ := ret[0].(*mercury.GetAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthPolicy indicates an expected call of GetAuthPolicy.
func (mr *MockMercuryMockRecorder) GetAuthPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthPolicy", reflect.TypeOf((*MockMercury)(nil).GetAuthPolicy), arg0)
}

// GetAuthPolicyRequest mocks base method.
func (m *MockMercury) GetAuthPolicyRequest(arg0 *mercury.GetAuthPolicyInput) (*request.Request, *mercury.GetAuthPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetAuthPolicyOutput)
	return ret0, ret1
}

// GetAuthPolicyRequest indicates an expected call of GetAuthPolicyRequest.
func (mr *MockMercuryMockRecorder) GetAuthPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthPolicyRequest", reflect.TypeOf((*MockMercury)(nil).GetAuthPolicyRequest), arg0)
}

// GetAuthPolicyWithContext mocks base method.
func (m *MockMercury) GetAuthPolicyWithContext(arg0 aws.Context, arg1 *mercury.GetAuthPolicyInput, arg2 ...request.Option) (*mercury.GetAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthPolicyWithContext indicates an expected call of GetAuthPolicyWithContext.
func (mr *MockMercuryMockRecorder) GetAuthPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthPolicyWithContext", reflect.TypeOf((*MockMercury)(nil).GetAuthPolicyWithContext), varargs...)
}

// GetListener mocks base method.
func (m *MockMercury) GetListener(arg0 *mercury.GetListenerInput) (*mercury.GetListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListener", arg0)
	ret0, _ := ret[0].(*mercury.GetListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListener indicates an expected call of GetListener.
func (mr *MockMercuryMockRecorder) GetListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListener", reflect.TypeOf((*MockMercury)(nil).GetListener), arg0)
}

// GetListenerRequest mocks base method.
func (m *MockMercury) GetListenerRequest(arg0 *mercury.GetListenerInput) (*request.Request, *mercury.GetListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetListenerOutput)
	return ret0, ret1
}

// GetListenerRequest indicates an expected call of GetListenerRequest.
func (mr *MockMercuryMockRecorder) GetListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListenerRequest", reflect.TypeOf((*MockMercury)(nil).GetListenerRequest), arg0)
}

// GetListenerWithContext mocks base method.
func (m *MockMercury) GetListenerWithContext(arg0 aws.Context, arg1 *mercury.GetListenerInput, arg2 ...request.Option) (*mercury.GetListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListenerWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListenerWithContext indicates an expected call of GetListenerWithContext.
func (mr *MockMercuryMockRecorder) GetListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListenerWithContext", reflect.TypeOf((*MockMercury)(nil).GetListenerWithContext), varargs...)
}

// GetMesh mocks base method.
func (m *MockMercury) GetMesh(arg0 *mercury.GetMeshInput) (*mercury.GetMeshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMesh", arg0)
	ret0, _ := ret[0].(*mercury.GetMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMesh indicates an expected call of GetMesh.
func (mr *MockMercuryMockRecorder) GetMesh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMesh", reflect.TypeOf((*MockMercury)(nil).GetMesh), arg0)
}

// GetMeshRequest mocks base method.
func (m *MockMercury) GetMeshRequest(arg0 *mercury.GetMeshInput) (*request.Request, *mercury.GetMeshOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetMeshOutput)
	return ret0, ret1
}

// GetMeshRequest indicates an expected call of GetMeshRequest.
func (mr *MockMercuryMockRecorder) GetMeshRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshRequest", reflect.TypeOf((*MockMercury)(nil).GetMeshRequest), arg0)
}

// GetMeshServiceAssociation mocks base method.
func (m *MockMercury) GetMeshServiceAssociation(arg0 *mercury.GetMeshServiceAssociationInput) (*mercury.GetMeshServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshServiceAssociation", arg0)
	ret0, _ := ret[0].(*mercury.GetMeshServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshServiceAssociation indicates an expected call of GetMeshServiceAssociation.
func (mr *MockMercuryMockRecorder) GetMeshServiceAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshServiceAssociation", reflect.TypeOf((*MockMercury)(nil).GetMeshServiceAssociation), arg0)
}

// GetMeshServiceAssociationRequest mocks base method.
func (m *MockMercury) GetMeshServiceAssociationRequest(arg0 *mercury.GetMeshServiceAssociationInput) (*request.Request, *mercury.GetMeshServiceAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshServiceAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetMeshServiceAssociationOutput)
	return ret0, ret1
}

// GetMeshServiceAssociationRequest indicates an expected call of GetMeshServiceAssociationRequest.
func (mr *MockMercuryMockRecorder) GetMeshServiceAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshServiceAssociationRequest", reflect.TypeOf((*MockMercury)(nil).GetMeshServiceAssociationRequest), arg0)
}

// GetMeshServiceAssociationWithContext mocks base method.
func (m *MockMercury) GetMeshServiceAssociationWithContext(arg0 aws.Context, arg1 *mercury.GetMeshServiceAssociationInput, arg2 ...request.Option) (*mercury.GetMeshServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeshServiceAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetMeshServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshServiceAssociationWithContext indicates an expected call of GetMeshServiceAssociationWithContext.
func (mr *MockMercuryMockRecorder) GetMeshServiceAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshServiceAssociationWithContext", reflect.TypeOf((*MockMercury)(nil).GetMeshServiceAssociationWithContext), varargs...)
}

// GetMeshVpcAssociation mocks base method.
func (m *MockMercury) GetMeshVpcAssociation(arg0 *mercury.GetMeshVpcAssociationInput) (*mercury.GetMeshVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshVpcAssociation", arg0)
	ret0, _ := ret[0].(*mercury.GetMeshVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshVpcAssociation indicates an expected call of GetMeshVpcAssociation.
func (mr *MockMercuryMockRecorder) GetMeshVpcAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshVpcAssociation", reflect.TypeOf((*MockMercury)(nil).GetMeshVpcAssociation), arg0)
}

// GetMeshVpcAssociationRequest mocks base method.
func (m *MockMercury) GetMeshVpcAssociationRequest(arg0 *mercury.GetMeshVpcAssociationInput) (*request.Request, *mercury.GetMeshVpcAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshVpcAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetMeshVpcAssociationOutput)
	return ret0, ret1
}

// GetMeshVpcAssociationRequest indicates an expected call of GetMeshVpcAssociationRequest.
func (mr *MockMercuryMockRecorder) GetMeshVpcAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshVpcAssociationRequest", reflect.TypeOf((*MockMercury)(nil).GetMeshVpcAssociationRequest), arg0)
}

// GetMeshVpcAssociationWithContext mocks base method.
func (m *MockMercury) GetMeshVpcAssociationWithContext(arg0 aws.Context, arg1 *mercury.GetMeshVpcAssociationInput, arg2 ...request.Option) (*mercury.GetMeshVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeshVpcAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetMeshVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshVpcAssociationWithContext indicates an expected call of GetMeshVpcAssociationWithContext.
func (mr *MockMercuryMockRecorder) GetMeshVpcAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshVpcAssociationWithContext", reflect.TypeOf((*MockMercury)(nil).GetMeshVpcAssociationWithContext), varargs...)
}

// GetMeshWithContext mocks base method.
func (m *MockMercury) GetMeshWithContext(arg0 aws.Context, arg1 *mercury.GetMeshInput, arg2 ...request.Option) (*mercury.GetMeshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeshWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshWithContext indicates an expected call of GetMeshWithContext.
func (mr *MockMercuryMockRecorder) GetMeshWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshWithContext", reflect.TypeOf((*MockMercury)(nil).GetMeshWithContext), varargs...)
}

// GetResourcePolicy mocks base method.
func (m *MockMercury) GetResourcePolicy(arg0 *mercury.GetResourcePolicyInput) (*mercury.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", arg0)
	ret0, _ := ret[0].(*mercury.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy.
func (mr *MockMercuryMockRecorder) GetResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockMercury)(nil).GetResourcePolicy), arg0)
}

// GetResourcePolicyRequest mocks base method.
func (m *MockMercury) GetResourcePolicyRequest(arg0 *mercury.GetResourcePolicyInput) (*request.Request, *mercury.GetResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetResourcePolicyOutput)
	return ret0, ret1
}

// GetResourcePolicyRequest indicates an expected call of GetResourcePolicyRequest.
func (mr *MockMercuryMockRecorder) GetResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyRequest", reflect.TypeOf((*MockMercury)(nil).GetResourcePolicyRequest), arg0)
}

// GetResourcePolicyWithContext mocks base method.
func (m *MockMercury) GetResourcePolicyWithContext(arg0 aws.Context, arg1 *mercury.GetResourcePolicyInput, arg2 ...request.Option) (*mercury.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicyWithContext indicates an expected call of GetResourcePolicyWithContext.
func (mr *MockMercuryMockRecorder) GetResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyWithContext", reflect.TypeOf((*MockMercury)(nil).GetResourcePolicyWithContext), varargs...)
}

// GetRule mocks base method.
func (m *MockMercury) GetRule(arg0 *mercury.GetRuleInput) (*mercury.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", arg0)
	ret0, _ := ret[0].(*mercury.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockMercuryMockRecorder) GetRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockMercury)(nil).GetRule), arg0)
}

// GetRuleRequest mocks base method.
func (m *MockMercury) GetRuleRequest(arg0 *mercury.GetRuleInput) (*request.Request, *mercury.GetRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetRuleOutput)
	return ret0, ret1
}

// GetRuleRequest indicates an expected call of GetRuleRequest.
func (mr *MockMercuryMockRecorder) GetRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleRequest", reflect.TypeOf((*MockMercury)(nil).GetRuleRequest), arg0)
}

// GetRuleWithContext mocks base method.
func (m *MockMercury) GetRuleWithContext(arg0 aws.Context, arg1 *mercury.GetRuleInput, arg2 ...request.Option) (*mercury.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleWithContext indicates an expected call of GetRuleWithContext.
func (mr *MockMercuryMockRecorder) GetRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleWithContext", reflect.TypeOf((*MockMercury)(nil).GetRuleWithContext), varargs...)
}

// GetService mocks base method.
func (m *MockMercury) GetService(arg0 *mercury.GetServiceInput) (*mercury.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*mercury.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockMercuryMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockMercury)(nil).GetService), arg0)
}

// GetServiceRequest mocks base method.
func (m *MockMercury) GetServiceRequest(arg0 *mercury.GetServiceInput) (*request.Request, *mercury.GetServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetServiceOutput)
	return ret0, ret1
}

// GetServiceRequest indicates an expected call of GetServiceRequest.
func (mr *MockMercuryMockRecorder) GetServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceRequest", reflect.TypeOf((*MockMercury)(nil).GetServiceRequest), arg0)
}

// GetServiceWithContext mocks base method.
func (m *MockMercury) GetServiceWithContext(arg0 aws.Context, arg1 *mercury.GetServiceInput, arg2 ...request.Option) (*mercury.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceWithContext indicates an expected call of GetServiceWithContext.
func (mr *MockMercuryMockRecorder) GetServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceWithContext", reflect.TypeOf((*MockMercury)(nil).GetServiceWithContext), varargs...)
}

// GetTargetGroup mocks base method.
func (m *MockMercury) GetTargetGroup(arg0 *mercury.GetTargetGroupInput) (*mercury.GetTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroup", arg0)
	ret0, _ := ret[0].(*mercury.GetTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetGroup indicates an expected call of GetTargetGroup.
func (mr *MockMercuryMockRecorder) GetTargetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroup", reflect.TypeOf((*MockMercury)(nil).GetTargetGroup), arg0)
}

// GetTargetGroupRequest mocks base method.
func (m *MockMercury) GetTargetGroupRequest(arg0 *mercury.GetTargetGroupInput) (*request.Request, *mercury.GetTargetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.GetTargetGroupOutput)
	return ret0, ret1
}

// GetTargetGroupRequest indicates an expected call of GetTargetGroupRequest.
func (mr *MockMercuryMockRecorder) GetTargetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroupRequest", reflect.TypeOf((*MockMercury)(nil).GetTargetGroupRequest), arg0)
}

// GetTargetGroupWithContext mocks base method.
func (m *MockMercury) GetTargetGroupWithContext(arg0 aws.Context, arg1 *mercury.GetTargetGroupInput, arg2 ...request.Option) (*mercury.GetTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTargetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.GetTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetGroupWithContext indicates an expected call of GetTargetGroupWithContext.
func (mr *MockMercuryMockRecorder) GetTargetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroupWithContext", reflect.TypeOf((*MockMercury)(nil).GetTargetGroupWithContext), varargs...)
}

// ListAccessLogSubscriptions mocks base method.
func (m *MockMercury) ListAccessLogSubscriptions(arg0 *mercury.ListAccessLogSubscriptionsInput) (*mercury.ListAccessLogSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessLogSubscriptions", arg0)
	ret0, _ := ret[0].(*mercury.ListAccessLogSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessLogSubscriptions indicates an expected call of ListAccessLogSubscriptions.
func (mr *MockMercuryMockRecorder) ListAccessLogSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessLogSubscriptions", reflect.TypeOf((*MockMercury)(nil).ListAccessLogSubscriptions), arg0)
}

// ListAccessLogSubscriptionsRequest mocks base method.
func (m *MockMercury) ListAccessLogSubscriptionsRequest(arg0 *mercury.ListAccessLogSubscriptionsInput) (*request.Request, *mercury.ListAccessLogSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessLogSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListAccessLogSubscriptionsOutput)
	return ret0, ret1
}

// ListAccessLogSubscriptionsRequest indicates an expected call of ListAccessLogSubscriptionsRequest.
func (mr *MockMercuryMockRecorder) ListAccessLogSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessLogSubscriptionsRequest", reflect.TypeOf((*MockMercury)(nil).ListAccessLogSubscriptionsRequest), arg0)
}

// ListAccessLogSubscriptionsWithContext mocks base method.
func (m *MockMercury) ListAccessLogSubscriptionsWithContext(arg0 aws.Context, arg1 *mercury.ListAccessLogSubscriptionsInput, arg2 ...request.Option) (*mercury.ListAccessLogSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessLogSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListAccessLogSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessLogSubscriptionsWithContext indicates an expected call of ListAccessLogSubscriptionsWithContext.
func (mr *MockMercuryMockRecorder) ListAccessLogSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessLogSubscriptionsWithContext", reflect.TypeOf((*MockMercury)(nil).ListAccessLogSubscriptionsWithContext), varargs...)
}

// ListListeners mocks base method.
func (m *MockMercury) ListListeners(arg0 *mercury.ListListenersInput) (*mercury.ListListenersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListeners", arg0)
	ret0, _ := ret[0].(*mercury.ListListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListeners indicates an expected call of ListListeners.
func (mr *MockMercuryMockRecorder) ListListeners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListeners", reflect.TypeOf((*MockMercury)(nil).ListListeners), arg0)
}

// ListListenersRequest mocks base method.
func (m *MockMercury) ListListenersRequest(arg0 *mercury.ListListenersInput) (*request.Request, *mercury.ListListenersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListenersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListListenersOutput)
	return ret0, ret1
}

// ListListenersRequest indicates an expected call of ListListenersRequest.
func (mr *MockMercuryMockRecorder) ListListenersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersRequest", reflect.TypeOf((*MockMercury)(nil).ListListenersRequest), arg0)
}

// ListListenersWithContext mocks base method.
func (m *MockMercury) ListListenersWithContext(arg0 aws.Context, arg1 *mercury.ListListenersInput, arg2 ...request.Option) (*mercury.ListListenersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListListenersWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListenersWithContext indicates an expected call of ListListenersWithContext.
func (mr *MockMercuryMockRecorder) ListListenersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersWithContext", reflect.TypeOf((*MockMercury)(nil).ListListenersWithContext), varargs...)
}

// ListMeshServiceAssociations mocks base method.
func (m *MockMercury) ListMeshServiceAssociations(arg0 *mercury.ListMeshServiceAssociationsInput) (*mercury.ListMeshServiceAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshServiceAssociations", arg0)
	ret0, _ := ret[0].(*mercury.ListMeshServiceAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshServiceAssociations indicates an expected call of ListMeshServiceAssociations.
func (mr *MockMercuryMockRecorder) ListMeshServiceAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshServiceAssociations", reflect.TypeOf((*MockMercury)(nil).ListMeshServiceAssociations), arg0)
}

// ListMeshServiceAssociationsAsList mocks base method.
func (m *MockMercury) ListMeshServiceAssociationsAsList(ctx context.Context, input *mercury.ListMeshServiceAssociationsInput) ([]*mercury.MeshServiceAssociationSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshServiceAssociationsAsList", ctx, input)
	ret0, _ := ret[0].([]*mercury.MeshServiceAssociationSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshServiceAssociationsAsList indicates an expected call of ListMeshServiceAssociationsAsList.
func (mr *MockMercuryMockRecorder) ListMeshServiceAssociationsAsList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshServiceAssociationsAsList", reflect.TypeOf((*MockMercury)(nil).ListMeshServiceAssociationsAsList), ctx, input)
}

// ListMeshServiceAssociationsRequest mocks base method.
func (m *MockMercury) ListMeshServiceAssociationsRequest(arg0 *mercury.ListMeshServiceAssociationsInput) (*request.Request, *mercury.ListMeshServiceAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshServiceAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListMeshServiceAssociationsOutput)
	return ret0, ret1
}

// ListMeshServiceAssociationsRequest indicates an expected call of ListMeshServiceAssociationsRequest.
func (mr *MockMercuryMockRecorder) ListMeshServiceAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshServiceAssociationsRequest", reflect.TypeOf((*MockMercury)(nil).ListMeshServiceAssociationsRequest), arg0)
}

// ListMeshServiceAssociationsWithContext mocks base method.
func (m *MockMercury) ListMeshServiceAssociationsWithContext(arg0 aws.Context, arg1 *mercury.ListMeshServiceAssociationsInput, arg2 ...request.Option) (*mercury.ListMeshServiceAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshServiceAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListMeshServiceAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshServiceAssociationsWithContext indicates an expected call of ListMeshServiceAssociationsWithContext.
func (mr *MockMercuryMockRecorder) ListMeshServiceAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshServiceAssociationsWithContext", reflect.TypeOf((*MockMercury)(nil).ListMeshServiceAssociationsWithContext), varargs...)
}

// ListMeshVpcAssociations mocks base method.
func (m *MockMercury) ListMeshVpcAssociations(arg0 *mercury.ListMeshVpcAssociationsInput) (*mercury.ListMeshVpcAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshVpcAssociations", arg0)
	ret0, _ := ret[0].(*mercury.ListMeshVpcAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshVpcAssociations indicates an expected call of ListMeshVpcAssociations.
func (mr *MockMercuryMockRecorder) ListMeshVpcAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshVpcAssociations", reflect.TypeOf((*MockMercury)(nil).ListMeshVpcAssociations), arg0)
}

// ListMeshVpcAssociationsAsList mocks base method.
func (m *MockMercury) ListMeshVpcAssociationsAsList(ctx context.Context, input *mercury.ListMeshVpcAssociationsInput) ([]*mercury.MeshVpcAssociationSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshVpcAssociationsAsList", ctx, input)
	ret0, _ := ret[0].([]*mercury.MeshVpcAssociationSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshVpcAssociationsAsList indicates an expected call of ListMeshVpcAssociationsAsList.
func (mr *MockMercuryMockRecorder) ListMeshVpcAssociationsAsList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshVpcAssociationsAsList", reflect.TypeOf((*MockMercury)(nil).ListMeshVpcAssociationsAsList), ctx, input)
}

// ListMeshVpcAssociationsRequest mocks base method.
func (m *MockMercury) ListMeshVpcAssociationsRequest(arg0 *mercury.ListMeshVpcAssociationsInput) (*request.Request, *mercury.ListMeshVpcAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshVpcAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListMeshVpcAssociationsOutput)
	return ret0, ret1
}

// ListMeshVpcAssociationsRequest indicates an expected call of ListMeshVpcAssociationsRequest.
func (mr *MockMercuryMockRecorder) ListMeshVpcAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshVpcAssociationsRequest", reflect.TypeOf((*MockMercury)(nil).ListMeshVpcAssociationsRequest), arg0)
}

// ListMeshVpcAssociationsWithContext mocks base method.
func (m *MockMercury) ListMeshVpcAssociationsWithContext(arg0 aws.Context, arg1 *mercury.ListMeshVpcAssociationsInput, arg2 ...request.Option) (*mercury.ListMeshVpcAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshVpcAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListMeshVpcAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshVpcAssociationsWithContext indicates an expected call of ListMeshVpcAssociationsWithContext.
func (mr *MockMercuryMockRecorder) ListMeshVpcAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshVpcAssociationsWithContext", reflect.TypeOf((*MockMercury)(nil).ListMeshVpcAssociationsWithContext), varargs...)
}

// ListMeshes mocks base method.
func (m *MockMercury) ListMeshes(arg0 *mercury.ListMeshesInput) (*mercury.ListMeshesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshes", arg0)
	ret0, _ := ret[0].(*mercury.ListMeshesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshes indicates an expected call of ListMeshes.
func (mr *MockMercuryMockRecorder) ListMeshes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshes", reflect.TypeOf((*MockMercury)(nil).ListMeshes), arg0)
}

// ListMeshesAsList mocks base method.
func (m *MockMercury) ListMeshesAsList(ctx context.Context, input *mercury.ListMeshesInput) ([]*mercury.MeshSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshesAsList", ctx, input)
	ret0, _ := ret[0].([]*mercury.MeshSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshesAsList indicates an expected call of ListMeshesAsList.
func (mr *MockMercuryMockRecorder) ListMeshesAsList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshesAsList", reflect.TypeOf((*MockMercury)(nil).ListMeshesAsList), ctx, input)
}

// ListMeshesRequest mocks base method.
func (m *MockMercury) ListMeshesRequest(arg0 *mercury.ListMeshesInput) (*request.Request, *mercury.ListMeshesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListMeshesOutput)
	return ret0, ret1
}

// ListMeshesRequest indicates an expected call of ListMeshesRequest.
func (mr *MockMercuryMockRecorder) ListMeshesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshesRequest", reflect.TypeOf((*MockMercury)(nil).ListMeshesRequest), arg0)
}

// ListMeshesWithContext mocks base method.
func (m *MockMercury) ListMeshesWithContext(arg0 aws.Context, arg1 *mercury.ListMeshesInput, arg2 ...request.Option) (*mercury.ListMeshesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeshesWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListMeshesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshesWithContext indicates an expected call of ListMeshesWithContext.
func (mr *MockMercuryMockRecorder) ListMeshesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshesWithContext", reflect.TypeOf((*MockMercury)(nil).ListMeshesWithContext), varargs...)
}

// ListRules mocks base method.
func (m *MockMercury) ListRules(arg0 *mercury.ListRulesInput) (*mercury.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0)
	ret0, _ := ret[0].(*mercury.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockMercuryMockRecorder) ListRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockMercury)(nil).ListRules), arg0)
}

// ListRulesRequest mocks base method.
func (m *MockMercury) ListRulesRequest(arg0 *mercury.ListRulesInput) (*request.Request, *mercury.ListRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListRulesOutput)
	return ret0, ret1
}

// ListRulesRequest indicates an expected call of ListRulesRequest.
func (mr *MockMercuryMockRecorder) ListRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesRequest", reflect.TypeOf((*MockMercury)(nil).ListRulesRequest), arg0)
}

// ListRulesWithContext mocks base method.
func (m *MockMercury) ListRulesWithContext(arg0 aws.Context, arg1 *mercury.ListRulesInput, arg2 ...request.Option) (*mercury.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesWithContext indicates an expected call of ListRulesWithContext.
func (mr *MockMercuryMockRecorder) ListRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesWithContext", reflect.TypeOf((*MockMercury)(nil).ListRulesWithContext), varargs...)
}

// ListServices mocks base method.
func (m *MockMercury) ListServices(arg0 *mercury.ListServicesInput) (*mercury.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].(*mercury.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockMercuryMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockMercury)(nil).ListServices), arg0)
}

// ListServicesAsList mocks base method.
func (m *MockMercury) ListServicesAsList(ctx context.Context, input *mercury.ListServicesInput) ([]*mercury.ServiceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesAsList", ctx, input)
	ret0, _ := ret[0].([]*mercury.ServiceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesAsList indicates an expected call of ListServicesAsList.
func (mr *MockMercuryMockRecorder) ListServicesAsList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesAsList", reflect.TypeOf((*MockMercury)(nil).ListServicesAsList), ctx, input)
}

// ListServicesRequest mocks base method.
func (m *MockMercury) ListServicesRequest(arg0 *mercury.ListServicesInput) (*request.Request, *mercury.ListServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListServicesOutput)
	return ret0, ret1
}

// ListServicesRequest indicates an expected call of ListServicesRequest.
func (mr *MockMercuryMockRecorder) ListServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesRequest", reflect.TypeOf((*MockMercury)(nil).ListServicesRequest), arg0)
}

// ListServicesWithContext mocks base method.
func (m *MockMercury) ListServicesWithContext(arg0 aws.Context, arg1 *mercury.ListServicesInput, arg2 ...request.Option) (*mercury.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesWithContext indicates an expected call of ListServicesWithContext.
func (mr *MockMercuryMockRecorder) ListServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesWithContext", reflect.TypeOf((*MockMercury)(nil).ListServicesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockMercury) ListTagsForResource(arg0 *mercury.ListTagsForResourceInput) (*mercury.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mercury.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockMercuryMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMercury)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockMercury) ListTagsForResourceRequest(arg0 *mercury.ListTagsForResourceInput) (*request.Request, *mercury.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockMercuryMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMercury)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockMercury) ListTagsForResourceWithContext(arg0 aws.Context, arg1 *mercury.ListTagsForResourceInput, arg2 ...request.Option) (*mercury.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockMercuryMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMercury)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTargetGroups mocks base method.
func (m *MockMercury) ListTargetGroups(arg0 *mercury.ListTargetGroupsInput) (*mercury.ListTargetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetGroups", arg0)
	ret0, _ := ret[0].(*mercury.ListTargetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetGroups indicates an expected call of ListTargetGroups.
func (mr *MockMercuryMockRecorder) ListTargetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroups", reflect.TypeOf((*MockMercury)(nil).ListTargetGroups), arg0)
}

// ListTargetGroupsAsList mocks base method.
func (m *MockMercury) ListTargetGroupsAsList(ctx context.Context, input *mercury.ListTargetGroupsInput) ([]*mercury.TargetGroupSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetGroupsAsList", ctx, input)
	ret0, _ := ret[0].([]*mercury.TargetGroupSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetGroupsAsList indicates an expected call of ListTargetGroupsAsList.
func (mr *MockMercuryMockRecorder) ListTargetGroupsAsList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroupsAsList", reflect.TypeOf((*MockMercury)(nil).ListTargetGroupsAsList), ctx, input)
}

// ListTargetGroupsRequest mocks base method.
func (m *MockMercury) ListTargetGroupsRequest(arg0 *mercury.ListTargetGroupsInput) (*request.Request, *mercury.ListTargetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListTargetGroupsOutput)
	return ret0, ret1
}

// ListTargetGroupsRequest indicates an expected call of ListTargetGroupsRequest.
func (mr *MockMercuryMockRecorder) ListTargetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroupsRequest", reflect.TypeOf((*MockMercury)(nil).ListTargetGroupsRequest), arg0)
}

// ListTargetGroupsWithContext mocks base method.
func (m *MockMercury) ListTargetGroupsWithContext(arg0 aws.Context, arg1 *mercury.ListTargetGroupsInput, arg2 ...request.Option) (*mercury.ListTargetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListTargetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetGroupsWithContext indicates an expected call of ListTargetGroupsWithContext.
func (mr *MockMercuryMockRecorder) ListTargetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroupsWithContext", reflect.TypeOf((*MockMercury)(nil).ListTargetGroupsWithContext), varargs...)
}

// ListTargets mocks base method.
func (m *MockMercury) ListTargets(arg0 *mercury.ListTargetsInput) (*mercury.ListTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargets", arg0)
	ret0, _ := ret[0].(*mercury.ListTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargets indicates an expected call of ListTargets.
func (mr *MockMercuryMockRecorder) ListTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargets", reflect.TypeOf((*MockMercury)(nil).ListTargets), arg0)
}

// ListTargetsAsList mocks base method.
func (m *MockMercury) ListTargetsAsList(ctx context.Context, input *mercury.ListTargetsInput) ([]*mercury.TargetSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetsAsList", ctx, input)
	ret0, _ := ret[0].([]*mercury.TargetSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsAsList indicates an expected call of ListTargetsAsList.
func (mr *MockMercuryMockRecorder) ListTargetsAsList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsAsList", reflect.TypeOf((*MockMercury)(nil).ListTargetsAsList), ctx, input)
}

// ListTargetsRequest mocks base method.
func (m *MockMercury) ListTargetsRequest(arg0 *mercury.ListTargetsInput) (*request.Request, *mercury.ListTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.ListTargetsOutput)
	return ret0, ret1
}

// ListTargetsRequest indicates an expected call of ListTargetsRequest.
func (mr *MockMercuryMockRecorder) ListTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsRequest", reflect.TypeOf((*MockMercury)(nil).ListTargetsRequest), arg0)
}

// ListTargetsWithContext mocks base method.
func (m *MockMercury) ListTargetsWithContext(arg0 aws.Context, arg1 *mercury.ListTargetsInput, arg2 ...request.Option) (*mercury.ListTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.ListTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsWithContext indicates an expected call of ListTargetsWithContext.
func (mr *MockMercuryMockRecorder) ListTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsWithContext", reflect.TypeOf((*MockMercury)(nil).ListTargetsWithContext), varargs...)
}

// PutAuthPolicy mocks base method.
func (m *MockMercury) PutAuthPolicy(arg0 *mercury.PutAuthPolicyInput) (*mercury.PutAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthPolicy", arg0)
	ret0, _ := ret[0].(*mercury.PutAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthPolicy indicates an expected call of PutAuthPolicy.
func (mr *MockMercuryMockRecorder) PutAuthPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthPolicy", reflect.TypeOf((*MockMercury)(nil).PutAuthPolicy), arg0)
}

// PutAuthPolicyRequest mocks base method.
func (m *MockMercury) PutAuthPolicyRequest(arg0 *mercury.PutAuthPolicyInput) (*request.Request, *mercury.PutAuthPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.PutAuthPolicyOutput)
	return ret0, ret1
}

// PutAuthPolicyRequest indicates an expected call of PutAuthPolicyRequest.
func (mr *MockMercuryMockRecorder) PutAuthPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthPolicyRequest", reflect.TypeOf((*MockMercury)(nil).PutAuthPolicyRequest), arg0)
}

// PutAuthPolicyWithContext mocks base method.
func (m *MockMercury) PutAuthPolicyWithContext(arg0 aws.Context, arg1 *mercury.PutAuthPolicyInput, arg2 ...request.Option) (*mercury.PutAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAuthPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.PutAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthPolicyWithContext indicates an expected call of PutAuthPolicyWithContext.
func (mr *MockMercuryMockRecorder) PutAuthPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthPolicyWithContext", reflect.TypeOf((*MockMercury)(nil).PutAuthPolicyWithContext), varargs...)
}

// PutResourcePolicy mocks base method.
func (m *MockMercury) PutResourcePolicy(arg0 *mercury.PutResourcePolicyInput) (*mercury.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicy", arg0)
	ret0, _ := ret[0].(*mercury.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy.
func (mr *MockMercuryMockRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockMercury)(nil).PutResourcePolicy), arg0)
}

// PutResourcePolicyRequest mocks base method.
func (m *MockMercury) PutResourcePolicyRequest(arg0 *mercury.PutResourcePolicyInput) (*request.Request, *mercury.PutResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.PutResourcePolicyOutput)
	return ret0, ret1
}

// PutResourcePolicyRequest indicates an expected call of PutResourcePolicyRequest.
func (mr *MockMercuryMockRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyRequest", reflect.TypeOf((*MockMercury)(nil).PutResourcePolicyRequest), arg0)
}

// PutResourcePolicyWithContext mocks base method.
func (m *MockMercury) PutResourcePolicyWithContext(arg0 aws.Context, arg1 *mercury.PutResourcePolicyInput, arg2 ...request.Option) (*mercury.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicyWithContext indicates an expected call of PutResourcePolicyWithContext.
func (mr *MockMercuryMockRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyWithContext", reflect.TypeOf((*MockMercury)(nil).PutResourcePolicyWithContext), varargs...)
}

// RegisterTargets mocks base method.
func (m *MockMercury) RegisterTargets(arg0 *mercury.RegisterTargetsInput) (*mercury.RegisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTargets", arg0)
	ret0, _ := ret[0].(*mercury.RegisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTargets indicates an expected call of RegisterTargets.
func (mr *MockMercuryMockRecorder) RegisterTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargets", reflect.TypeOf((*MockMercury)(nil).RegisterTargets), arg0)
}

// RegisterTargetsRequest mocks base method.
func (m *MockMercury) RegisterTargetsRequest(arg0 *mercury.RegisterTargetsInput) (*request.Request, *mercury.RegisterTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.RegisterTargetsOutput)
	return ret0, ret1
}

// RegisterTargetsRequest indicates an expected call of RegisterTargetsRequest.
func (mr *MockMercuryMockRecorder) RegisterTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargetsRequest", reflect.TypeOf((*MockMercury)(nil).RegisterTargetsRequest), arg0)
}

// RegisterTargetsWithContext mocks base method.
func (m *MockMercury) RegisterTargetsWithContext(arg0 aws.Context, arg1 *mercury.RegisterTargetsInput, arg2 ...request.Option) (*mercury.RegisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.RegisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTargetsWithContext indicates an expected call of RegisterTargetsWithContext.
func (mr *MockMercuryMockRecorder) RegisterTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargetsWithContext", reflect.TypeOf((*MockMercury)(nil).RegisterTargetsWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockMercury) TagResource(arg0 *mercury.TagResourceInput) (*mercury.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mercury.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockMercuryMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMercury)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockMercury) TagResourceRequest(arg0 *mercury.TagResourceInput) (*request.Request, *mercury.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockMercuryMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMercury)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockMercury) TagResourceWithContext(arg0 aws.Context, arg1 *mercury.TagResourceInput, arg2 ...request.Option) (*mercury.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockMercuryMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMercury)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockMercury) UntagResource(arg0 *mercury.UntagResourceInput) (*mercury.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mercury.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockMercuryMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMercury)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockMercury) UntagResourceRequest(arg0 *mercury.UntagResourceInput) (*request.Request, *mercury.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockMercuryMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMercury)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockMercury) UntagResourceWithContext(arg0 aws.Context, arg1 *mercury.UntagResourceInput, arg2 ...request.Option) (*mercury.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockMercuryMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMercury)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccessLogSubscription mocks base method.
func (m *MockMercury) UpdateAccessLogSubscription(arg0 *mercury.UpdateAccessLogSubscriptionInput) (*mercury.UpdateAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessLogSubscription", arg0)
	ret0, _ := ret[0].(*mercury.UpdateAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessLogSubscription indicates an expected call of UpdateAccessLogSubscription.
func (mr *MockMercuryMockRecorder) UpdateAccessLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessLogSubscription", reflect.TypeOf((*MockMercury)(nil).UpdateAccessLogSubscription), arg0)
}

// UpdateAccessLogSubscriptionRequest mocks base method.
func (m *MockMercury) UpdateAccessLogSubscriptionRequest(arg0 *mercury.UpdateAccessLogSubscriptionInput) (*request.Request, *mercury.UpdateAccessLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.UpdateAccessLogSubscriptionOutput)
	return ret0, ret1
}

// UpdateAccessLogSubscriptionRequest indicates an expected call of UpdateAccessLogSubscriptionRequest.
func (mr *MockMercuryMockRecorder) UpdateAccessLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessLogSubscriptionRequest", reflect.TypeOf((*MockMercury)(nil).UpdateAccessLogSubscriptionRequest), arg0)
}

// UpdateAccessLogSubscriptionWithContext mocks base method.
func (m *MockMercury) UpdateAccessLogSubscriptionWithContext(arg0 aws.Context, arg1 *mercury.UpdateAccessLogSubscriptionInput, arg2 ...request.Option) (*mercury.UpdateAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.UpdateAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessLogSubscriptionWithContext indicates an expected call of UpdateAccessLogSubscriptionWithContext.
func (mr *MockMercuryMockRecorder) UpdateAccessLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessLogSubscriptionWithContext", reflect.TypeOf((*MockMercury)(nil).UpdateAccessLogSubscriptionWithContext), varargs...)
}

// UpdateListener mocks base method.
func (m *MockMercury) UpdateListener(arg0 *mercury.UpdateListenerInput) (*mercury.UpdateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListener", arg0)
	ret0, _ := ret[0].(*mercury.UpdateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListener indicates an expected call of UpdateListener.
func (mr *MockMercuryMockRecorder) UpdateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListener", reflect.TypeOf((*MockMercury)(nil).UpdateListener), arg0)
}

// UpdateListenerRequest mocks base method.
func (m *MockMercury) UpdateListenerRequest(arg0 *mercury.UpdateListenerInput) (*request.Request, *mercury.UpdateListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.UpdateListenerOutput)
	return ret0, ret1
}

// UpdateListenerRequest indicates an expected call of UpdateListenerRequest.
func (mr *MockMercuryMockRecorder) UpdateListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListenerRequest", reflect.TypeOf((*MockMercury)(nil).UpdateListenerRequest), arg0)
}

// UpdateListenerWithContext mocks base method.
func (m *MockMercury) UpdateListenerWithContext(arg0 aws.Context, arg1 *mercury.UpdateListenerInput, arg2 ...request.Option) (*mercury.UpdateListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateListenerWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.UpdateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListenerWithContext indicates an expected call of UpdateListenerWithContext.
func (mr *MockMercuryMockRecorder) UpdateListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListenerWithContext", reflect.TypeOf((*MockMercury)(nil).UpdateListenerWithContext), varargs...)
}

// UpdateMesh mocks base method.
func (m *MockMercury) UpdateMesh(arg0 *mercury.UpdateMeshInput) (*mercury.UpdateMeshOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMesh", arg0)
	ret0, _ := ret[0].(*mercury.UpdateMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMesh indicates an expected call of UpdateMesh.
func (mr *MockMercuryMockRecorder) UpdateMesh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMercury)(nil).UpdateMesh), arg0)
}

// UpdateMeshRequest mocks base method.
func (m *MockMercury) UpdateMeshRequest(arg0 *mercury.UpdateMeshInput) (*request.Request, *mercury.UpdateMeshOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeshRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.UpdateMeshOutput)
	return ret0, ret1
}

// UpdateMeshRequest indicates an expected call of UpdateMeshRequest.
func (mr *MockMercuryMockRecorder) UpdateMeshRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshRequest", reflect.TypeOf((*MockMercury)(nil).UpdateMeshRequest), arg0)
}

// UpdateMeshVpcAssociation mocks base method.
func (m *MockMercury) UpdateMeshVpcAssociation(arg0 *mercury.UpdateMeshVpcAssociationInput) (*mercury.UpdateMeshVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeshVpcAssociation", arg0)
	ret0, _ := ret[0].(*mercury.UpdateMeshVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeshVpcAssociation indicates an expected call of UpdateMeshVpcAssociation.
func (mr *MockMercuryMockRecorder) UpdateMeshVpcAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshVpcAssociation", reflect.TypeOf((*MockMercury)(nil).UpdateMeshVpcAssociation), arg0)
}

// UpdateMeshVpcAssociationRequest mocks base method.
func (m *MockMercury) UpdateMeshVpcAssociationRequest(arg0 *mercury.UpdateMeshVpcAssociationInput) (*request.Request, *mercury.UpdateMeshVpcAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeshVpcAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.UpdateMeshVpcAssociationOutput)
	return ret0, ret1
}

// UpdateMeshVpcAssociationRequest indicates an expected call of UpdateMeshVpcAssociationRequest.
func (mr *MockMercuryMockRecorder) UpdateMeshVpcAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshVpcAssociationRequest", reflect.TypeOf((*MockMercury)(nil).UpdateMeshVpcAssociationRequest), arg0)
}

// UpdateMeshVpcAssociationWithContext mocks base method.
func (m *MockMercury) UpdateMeshVpcAssociationWithContext(arg0 aws.Context, arg1 *mercury.UpdateMeshVpcAssociationInput, arg2 ...request.Option) (*mercury.UpdateMeshVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshVpcAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.UpdateMeshVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeshVpcAssociationWithContext indicates an expected call of UpdateMeshVpcAssociationWithContext.
func (mr *MockMercuryMockRecorder) UpdateMeshVpcAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshVpcAssociationWithContext", reflect.TypeOf((*MockMercury)(nil).UpdateMeshVpcAssociationWithContext), varargs...)
}

// UpdateMeshWithContext mocks base method.
func (m *MockMercury) UpdateMeshWithContext(arg0 aws.Context, arg1 *mercury.UpdateMeshInput, arg2 ...request.Option) (*mercury.UpdateMeshOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeshWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.UpdateMeshOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeshWithContext indicates an expected call of UpdateMeshWithContext.
func (mr *MockMercuryMockRecorder) UpdateMeshWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeshWithContext", reflect.TypeOf((*MockMercury)(nil).UpdateMeshWithContext), varargs...)
}

// UpdateRule mocks base method.
func (m *MockMercury) UpdateRule(arg0 *mercury.UpdateRuleInput) (*mercury.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", arg0)
	ret0, _ := ret[0].(*mercury.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRule indicates an expected call of UpdateRule.
func (mr *MockMercuryMockRecorder) UpdateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockMercury)(nil).UpdateRule), arg0)
}

// UpdateRuleRequest mocks base method.
func (m *MockMercury) UpdateRuleRequest(arg0 *mercury.UpdateRuleInput) (*request.Request, *mercury.UpdateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.UpdateRuleOutput)
	return ret0, ret1
}

// UpdateRuleRequest indicates an expected call of UpdateRuleRequest.
func (mr *MockMercuryMockRecorder) UpdateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleRequest", reflect.TypeOf((*MockMercury)(nil).UpdateRuleRequest), arg0)
}

// UpdateRuleWithContext mocks base method.
func (m *MockMercury) UpdateRuleWithContext(arg0 aws.Context, arg1 *mercury.UpdateRuleInput, arg2 ...request.Option) (*mercury.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleWithContext indicates an expected call of UpdateRuleWithContext.
func (mr *MockMercuryMockRecorder) UpdateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleWithContext", reflect.TypeOf((*MockMercury)(nil).UpdateRuleWithContext), varargs...)
}

// UpdateService mocks base method.
func (m *MockMercury) UpdateService(arg0 *mercury.UpdateServiceInput) (*mercury.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(*mercury.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockMercuryMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockMercury)(nil).UpdateService), arg0)
}

// UpdateServiceRequest mocks base method.
func (m *MockMercury) UpdateServiceRequest(arg0 *mercury.UpdateServiceInput) (*request.Request, *mercury.UpdateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.UpdateServiceOutput)
	return ret0, ret1
}

// UpdateServiceRequest indicates an expected call of UpdateServiceRequest.
func (mr *MockMercuryMockRecorder) UpdateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceRequest", reflect.TypeOf((*MockMercury)(nil).UpdateServiceRequest), arg0)
}

// UpdateServiceWithContext mocks base method.
func (m *MockMercury) UpdateServiceWithContext(arg0 aws.Context, arg1 *mercury.UpdateServiceInput, arg2 ...request.Option) (*mercury.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceWithContext indicates an expected call of UpdateServiceWithContext.
func (mr *MockMercuryMockRecorder) UpdateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceWithContext", reflect.TypeOf((*MockMercury)(nil).UpdateServiceWithContext), varargs...)
}

// UpdateTargetGroup mocks base method.
func (m *MockMercury) UpdateTargetGroup(arg0 *mercury.UpdateTargetGroupInput) (*mercury.UpdateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetGroup", arg0)
	ret0, _ := ret[0].(*mercury.UpdateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetGroup indicates an expected call of UpdateTargetGroup.
func (mr *MockMercuryMockRecorder) UpdateTargetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroup", reflect.TypeOf((*MockMercury)(nil).UpdateTargetGroup), arg0)
}

// UpdateTargetGroupRequest mocks base method.
func (m *MockMercury) UpdateTargetGroupRequest(arg0 *mercury.UpdateTargetGroupInput) (*request.Request, *mercury.UpdateTargetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mercury.UpdateTargetGroupOutput)
	return ret0, ret1
}

// UpdateTargetGroupRequest indicates an expected call of UpdateTargetGroupRequest.
func (mr *MockMercuryMockRecorder) UpdateTargetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroupRequest", reflect.TypeOf((*MockMercury)(nil).UpdateTargetGroupRequest), arg0)
}

// UpdateTargetGroupWithContext mocks base method.
func (m *MockMercury) UpdateTargetGroupWithContext(arg0 aws.Context, arg1 *mercury.UpdateTargetGroupInput, arg2 ...request.Option) (*mercury.UpdateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTargetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*mercury.UpdateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetGroupWithContext indicates an expected call of UpdateTargetGroupWithContext.
func (mr *MockMercuryMockRecorder) UpdateTargetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroupWithContext", reflect.TypeOf((*MockMercury)(nil).UpdateTargetGroupWithContext), varargs...)
}
